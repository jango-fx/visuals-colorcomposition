<svg onload="init(evt, true)" width="100%" height="100%" viewBox="0 0 1920 1080" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xml:space="preserve" xmlns:serif="http://www.serif.com/" style="fill-rule:evenodd;clip-rule:evenodd;stroke-linejoin:round;stroke-miterlimit:2;">
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Roboto+Mono');
        
        #title{
            font-size: 80px;
            dominant-baseline: hanging;
            font-family: 'Roboto Mono', monospace;
            font-weight: bold;
        }

    </style>
    <rect id="box-bright" x="0" y="0" width="1920" height="1080" fill="white" onclick="click(evt.target)" />
    <!-- <rect id="box-dark" x="1060" y="0" width="860" height="1080" fill="black" onclick="toggleSaturation(evt.target)" /> -->
    <g id="container" ></g>
    <text id="title" x="100" y="100" fill="black"></text>
    <script xlink:href="https://cdnjs.cloudflare.com/ajax/libs/seedrandom/3.0.5/lib/alea.min.js" />
    <script>
        <![CDATA[

        var contrast;
        var hue;
        var rand;


        function init(evt, showTitle) {
            document.addEventListener('mousewheel', scrollHandler, false); //IE9, Chrome, Safari, Oper
            document.addEventListener('wheel', scrollHandler, false); //Firefox
            if (showTitle) setTitle()

            contrast = 0.2;
            hue = random(0, 360);
            computeColors(hue);
        }
        
        function setTitle() {
            if (navigator.language.split('-')[0] == 'de') {
                document.getElementById('title').innerHTML = 'Helligkeitskontrast';
            }
            else {
                document.getElementById('title').innerHTML = 'Brightness Contrast';
            }
        }

        function click(target) {
            var elm = document.getElementById(target.id);
            console.log(elm)
            console.log(elm.id)
            if(elm.id == "box-bright") elm.style.fill = 'hsl(50,100%,50%)';
          }
         
        function scrollHandler(target) {
            //console.log(target);
            if(!(contrast >= 0.8 && target.deltaY > 0) && !(contrast <= 0.2 && target.deltaY < 0))
            {
                contrast += target.deltaY*0.002;
                contrast = contrast.clamp(0.2, 0.8);
                computeColors(hue);
            }
        }

        function computeColors(hue)
        {
            randSeed = new alea('seed');
            
            document.getElementById('box-bright').style.fill = createHSL(hue, 100, 50);
            let i = 0;
            for(let ix = 0; ix < 10; ix++){
                for(let iy = 0; iy < 10; iy++){
                    i++;
                    var id = "box"+i;
                    var theNode = document.getElementById(id);
                    if(theNode == null)
                    {
                        var gridSize = 600;
                        var size = gridSize/10;
                        var xOff = (1920-gridSize)/3*2;
                        var yOff = (1080-gridSize)/2;
                        
                        theNode = createNode('rect', { x: xOff+ix*size, y: yOff+iy*size, width: size, height: size, fill:'red', id:id});
                        document.getElementById("container").appendChild(theNode);    
                    }
                    
                    var sat = 50;
                    var brt = random(5+(45*(1-contrast)), 50+50*contrast);
                    //var brt = 52.5+((95/2)*((randSeed('seed')-0.5)*2)*contrast)

                    theNode.style.fill = createHSL(hue, sat, brt);
                }
            }

        }

        function createNode(n, v) {
            n = document.createElementNS("http://www.w3.org/2000/svg", n);
            for (var p in v)
              n.setAttributeNS(null, p.replace(/[A-Z]/g, function(m, p, o, s) { return "-" + m.toLowerCase(); }), v[p]);
            return n
          }

        Number.prototype.clamp = function(min, max) {
            return Math.min(Math.max(this, min), max);
          };
        
        const createHSL = (hue, sat, brt) => "hsl(" + hue + ", " + sat + "%, " + brt + "%)";
        const constrain = (num, min, max) => Math.min(Math.max(num, min), max);
        const random = (min, max) => Math.random() * (max - min) + min;
          ]]>
    </script>

</svg>